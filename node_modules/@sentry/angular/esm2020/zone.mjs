// In Angular 17 and future versions, zoneless support is forthcoming.
// Therefore, it's advisable to safely check whether the `run` function is
// available in the `<root>` context.
// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
const isNgZoneEnabled = typeof Zone !== 'undefined' && Zone.root && Zone.root.run;
/**
 * The function that does the same job as `NgZone.runOutsideAngular`.
 *
 * ⚠️ Note: All of the Sentry functionality called from inside the Angular
 * execution context must be wrapped in this function. Angular's rendering
 * relies on asynchronous tasks being scheduled within its execution context.
 * Since Sentry schedules tasks that do not interact with Angular's rendering,
 * it may prevent Angular from functioning reliably. Consequently, it may disrupt
 * processes such as server-side rendering or client-side hydration.
 */
export function runOutsideAngular(callback) {
    // Running the `callback` within the root execution context enables Angular
    // processes (such as SSR and hydration) to continue functioning normally without
    // timeouts and delays that could affect the user experience. This approach is
    // necessary because some of the Sentry functionality continues to run in the background.
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return isNgZoneEnabled ? Zone.root.run(callback) : callback();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy96b25lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLHNFQUFzRTtBQUN0RSwwRUFBMEU7QUFDMUUscUNBQXFDO0FBQ3JDLHNFQUFzRTtBQUN0RSxNQUFNLGVBQWUsR0FBRyxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUVsRjs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQUksUUFBaUI7SUFDcEQsMkVBQTJFO0lBQzNFLGlGQUFpRjtJQUNqRiw4RUFBOEU7SUFDOUUseUZBQXlGO0lBQ3pGLHNFQUFzRTtJQUN0RSxPQUFPLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ2hFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIHdvdWxkIGJlIGV4cG9zZWQgaW4gdGhlIGdsb2JhbCBlbnZpcm9ubWVudCB3aGVuZXZlciBgem9uZS5qc2AgaXNcbi8vIGluY2x1ZGVkIGluIHRoZSBgcG9seWZpbGxzYCBjb25maWd1cmF0aW9uIHByb3BlcnR5LiBTdGFydGluZyBmcm9tIEFuZ3VsYXIgMTcsXG4vLyB1c2VycyBjYW4gb3B0LWluIHRvIHVzZSB6b25lbGVzcyBjaGFuZ2UgZGV0ZWN0aW9uLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmRlY2xhcmUgY29uc3QgWm9uZTogYW55O1xuXG4vLyBJbiBBbmd1bGFyIDE3IGFuZCBmdXR1cmUgdmVyc2lvbnMsIHpvbmVsZXNzIHN1cHBvcnQgaXMgZm9ydGhjb21pbmcuXG4vLyBUaGVyZWZvcmUsIGl0J3MgYWR2aXNhYmxlIHRvIHNhZmVseSBjaGVjayB3aGV0aGVyIHRoZSBgcnVuYCBmdW5jdGlvbiBpc1xuLy8gYXZhaWxhYmxlIGluIHRoZSBgPHJvb3Q+YCBjb250ZXh0LlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuY29uc3QgaXNOZ1pvbmVFbmFibGVkID0gdHlwZW9mIFpvbmUgIT09ICd1bmRlZmluZWQnICYmIFpvbmUucm9vdCAmJiBab25lLnJvb3QucnVuO1xuXG4vKipcbiAqIFRoZSBmdW5jdGlvbiB0aGF0IGRvZXMgdGhlIHNhbWUgam9iIGFzIGBOZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXJgLlxuICpcbiAqIOKaoO+4jyBOb3RlOiBBbGwgb2YgdGhlIFNlbnRyeSBmdW5jdGlvbmFsaXR5IGNhbGxlZCBmcm9tIGluc2lkZSB0aGUgQW5ndWxhclxuICogZXhlY3V0aW9uIGNvbnRleHQgbXVzdCBiZSB3cmFwcGVkIGluIHRoaXMgZnVuY3Rpb24uIEFuZ3VsYXIncyByZW5kZXJpbmdcbiAqIHJlbGllcyBvbiBhc3luY2hyb25vdXMgdGFza3MgYmVpbmcgc2NoZWR1bGVkIHdpdGhpbiBpdHMgZXhlY3V0aW9uIGNvbnRleHQuXG4gKiBTaW5jZSBTZW50cnkgc2NoZWR1bGVzIHRhc2tzIHRoYXQgZG8gbm90IGludGVyYWN0IHdpdGggQW5ndWxhcidzIHJlbmRlcmluZyxcbiAqIGl0IG1heSBwcmV2ZW50IEFuZ3VsYXIgZnJvbSBmdW5jdGlvbmluZyByZWxpYWJseS4gQ29uc2VxdWVudGx5LCBpdCBtYXkgZGlzcnVwdFxuICogcHJvY2Vzc2VzIHN1Y2ggYXMgc2VydmVyLXNpZGUgcmVuZGVyaW5nIG9yIGNsaWVudC1zaWRlIGh5ZHJhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bk91dHNpZGVBbmd1bGFyPFQ+KGNhbGxiYWNrOiAoKSA9PiBUKTogVCB7XG4gIC8vIFJ1bm5pbmcgdGhlIGBjYWxsYmFja2Agd2l0aGluIHRoZSByb290IGV4ZWN1dGlvbiBjb250ZXh0IGVuYWJsZXMgQW5ndWxhclxuICAvLyBwcm9jZXNzZXMgKHN1Y2ggYXMgU1NSIGFuZCBoeWRyYXRpb24pIHRvIGNvbnRpbnVlIGZ1bmN0aW9uaW5nIG5vcm1hbGx5IHdpdGhvdXRcbiAgLy8gdGltZW91dHMgYW5kIGRlbGF5cyB0aGF0IGNvdWxkIGFmZmVjdCB0aGUgdXNlciBleHBlcmllbmNlLiBUaGlzIGFwcHJvYWNoIGlzXG4gIC8vIG5lY2Vzc2FyeSBiZWNhdXNlIHNvbWUgb2YgdGhlIFNlbnRyeSBmdW5jdGlvbmFsaXR5IGNvbnRpbnVlcyB0byBydW4gaW4gdGhlIGJhY2tncm91bmQuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgcmV0dXJuIGlzTmdab25lRW5hYmxlZCA/IFpvbmUucm9vdC5ydW4oY2FsbGJhY2spIDogY2FsbGJhY2soKTtcbn1cbiJdfQ==