import { VERSION } from '@angular/core';
import { breadcrumbsIntegration, globalHandlersIntegration, httpContextIntegration, linkedErrorsIntegration, } from '@sentry/browser';
import { init as browserInit, setContext } from '@sentry/browser';
import { applySdkMetadata, dedupeIntegration, functionToStringIntegration, inboundFiltersIntegration, } from '@sentry/core';
import { logger } from '@sentry/utils';
import { IS_DEBUG_BUILD } from './flags';
/**
 * Get the default integrations for the Angular SDK.
 */
export function getDefaultIntegrations() {
    // Don't include the BrowserApiErrors integration as it interferes with the Angular SDK's `ErrorHandler`:
    // BrowserApiErrors would catch certain errors before they reach the `ErrorHandler` and
    // thus provide a lower fidelity error than what `SentryErrorHandler`
    // (see errorhandler.ts) would provide.
    //
    // see:
    //  - https://github.com/getsentry/sentry-javascript/issues/5417#issuecomment-1453407097
    //  - https://github.com/getsentry/sentry-javascript/issues/2744
    return [
        inboundFiltersIntegration(),
        functionToStringIntegration(),
        breadcrumbsIntegration(),
        globalHandlersIntegration(),
        linkedErrorsIntegration(),
        dedupeIntegration(),
        httpContextIntegration(),
    ];
}
/**
 * Inits the Angular SDK
 */
export function init(options) {
    const opts = {
        defaultIntegrations: getDefaultIntegrations(),
        ...options,
    };
    applySdkMetadata(opts, 'angular');
    checkAndSetAngularVersion();
    return browserInit(opts);
}
function checkAndSetAngularVersion() {
    const ANGULAR_MINIMUM_VERSION = 14;
    const angularVersion = VERSION && VERSION.major ? parseInt(VERSION.major, 10) : undefined;
    if (angularVersion) {
        if (angularVersion < ANGULAR_MINIMUM_VERSION) {
            IS_DEBUG_BUILD &&
                logger.warn(`This Sentry SDK does not officially support Angular ${angularVersion}.`, `This SDK only supports Angular ${ANGULAR_MINIMUM_VERSION} and above.`, "If you're using lower Angular versions, check the Angular Version Compatibility table in our docs: https://docs.sentry.io/platforms/javascript/guides/angular/#angular-version-compatibility.", 'Otherwise, please consider upgrading your Angular version.');
        }
        setContext('angular', { version: angularVersion });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2RrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Nkay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhDLE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIseUJBQXlCLEVBQ3pCLHNCQUFzQixFQUN0Qix1QkFBdUIsR0FDeEIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsSUFBSSxJQUFJLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNqQiwyQkFBMkIsRUFDM0IseUJBQXlCLEdBQzFCLE1BQU0sY0FBYyxDQUFDO0FBRXRCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV6Qzs7R0FFRztBQUNILE1BQU0sVUFBVSxzQkFBc0I7SUFDcEMseUdBQXlHO0lBQ3pHLHVGQUF1RjtJQUN2RixxRUFBcUU7SUFDckUsdUNBQXVDO0lBQ3ZDLEVBQUU7SUFDRixPQUFPO0lBQ1Asd0ZBQXdGO0lBQ3hGLGdFQUFnRTtJQUNoRSxPQUFPO1FBQ0wseUJBQXlCLEVBQUU7UUFDM0IsMkJBQTJCLEVBQUU7UUFDN0Isc0JBQXNCLEVBQUU7UUFDeEIseUJBQXlCLEVBQUU7UUFDM0IsdUJBQXVCLEVBQUU7UUFDekIsaUJBQWlCLEVBQUU7UUFDbkIsc0JBQXNCLEVBQUU7S0FDekIsQ0FBQztBQUNKLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxJQUFJLENBQUMsT0FBdUI7SUFDMUMsTUFBTSxJQUFJLEdBQUc7UUFDWCxtQkFBbUIsRUFBRSxzQkFBc0IsRUFBRTtRQUM3QyxHQUFHLE9BQU87S0FDWCxDQUFDO0lBRUYsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWxDLHlCQUF5QixFQUFFLENBQUM7SUFDNUIsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQUVELFNBQVMseUJBQXlCO0lBQ2hDLE1BQU0sdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0lBRW5DLE1BQU0sY0FBYyxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBRTFGLElBQUksY0FBYyxFQUFFO1FBQ2xCLElBQUksY0FBYyxHQUFHLHVCQUF1QixFQUFFO1lBQzVDLGNBQWM7Z0JBQ1osTUFBTSxDQUFDLElBQUksQ0FDVCx1REFBdUQsY0FBYyxHQUFHLEVBQ3hFLGtDQUFrQyx1QkFBdUIsYUFBYSxFQUN0RSwrTEFBK0wsRUFDL0wsNERBQTRELENBQzdELENBQUM7U0FDTDtRQUNELFVBQVUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztLQUNwRDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgdHlwZSB7IEJyb3dzZXJPcHRpb25zIH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbmltcG9ydCB7XG4gIGJyZWFkY3J1bWJzSW50ZWdyYXRpb24sXG4gIGdsb2JhbEhhbmRsZXJzSW50ZWdyYXRpb24sXG4gIGh0dHBDb250ZXh0SW50ZWdyYXRpb24sXG4gIGxpbmtlZEVycm9yc0ludGVncmF0aW9uLFxufSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuaW1wb3J0IHsgaW5pdCBhcyBicm93c2VySW5pdCwgc2V0Q29udGV4dCB9IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG5pbXBvcnQge1xuICBhcHBseVNka01ldGFkYXRhLFxuICBkZWR1cGVJbnRlZ3JhdGlvbixcbiAgZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uLFxuICBpbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uLFxufSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBDbGllbnQsIEludGVncmF0aW9uIH0gZnJvbSAnQHNlbnRyeS90eXBlcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcblxuaW1wb3J0IHsgSVNfREVCVUdfQlVJTEQgfSBmcm9tICcuL2ZsYWdzJztcblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgaW50ZWdyYXRpb25zIGZvciB0aGUgQW5ndWxhciBTREsuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0SW50ZWdyYXRpb25zKCk6IEludGVncmF0aW9uW10ge1xuICAvLyBEb24ndCBpbmNsdWRlIHRoZSBCcm93c2VyQXBpRXJyb3JzIGludGVncmF0aW9uIGFzIGl0IGludGVyZmVyZXMgd2l0aCB0aGUgQW5ndWxhciBTREsncyBgRXJyb3JIYW5kbGVyYDpcbiAgLy8gQnJvd3NlckFwaUVycm9ycyB3b3VsZCBjYXRjaCBjZXJ0YWluIGVycm9ycyBiZWZvcmUgdGhleSByZWFjaCB0aGUgYEVycm9ySGFuZGxlcmAgYW5kXG4gIC8vIHRodXMgcHJvdmlkZSBhIGxvd2VyIGZpZGVsaXR5IGVycm9yIHRoYW4gd2hhdCBgU2VudHJ5RXJyb3JIYW5kbGVyYFxuICAvLyAoc2VlIGVycm9yaGFuZGxlci50cykgd291bGQgcHJvdmlkZS5cbiAgLy9cbiAgLy8gc2VlOlxuICAvLyAgLSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy81NDE3I2lzc3VlY29tbWVudC0xNDUzNDA3MDk3XG4gIC8vICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzI3NDRcbiAgcmV0dXJuIFtcbiAgICBpbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uKCksXG4gICAgZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uKCksXG4gICAgYnJlYWRjcnVtYnNJbnRlZ3JhdGlvbigpLFxuICAgIGdsb2JhbEhhbmRsZXJzSW50ZWdyYXRpb24oKSxcbiAgICBsaW5rZWRFcnJvcnNJbnRlZ3JhdGlvbigpLFxuICAgIGRlZHVwZUludGVncmF0aW9uKCksXG4gICAgaHR0cENvbnRleHRJbnRlZ3JhdGlvbigpLFxuICBdO1xufVxuXG4vKipcbiAqIEluaXRzIHRoZSBBbmd1bGFyIFNES1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdChvcHRpb25zOiBCcm93c2VyT3B0aW9ucyk6IENsaWVudCB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IG9wdHMgPSB7XG4gICAgZGVmYXVsdEludGVncmF0aW9uczogZ2V0RGVmYXVsdEludGVncmF0aW9ucygpLFxuICAgIC4uLm9wdGlvbnMsXG4gIH07XG5cbiAgYXBwbHlTZGtNZXRhZGF0YShvcHRzLCAnYW5ndWxhcicpO1xuXG4gIGNoZWNrQW5kU2V0QW5ndWxhclZlcnNpb24oKTtcbiAgcmV0dXJuIGJyb3dzZXJJbml0KG9wdHMpO1xufVxuXG5mdW5jdGlvbiBjaGVja0FuZFNldEFuZ3VsYXJWZXJzaW9uKCk6IHZvaWQge1xuICBjb25zdCBBTkdVTEFSX01JTklNVU1fVkVSU0lPTiA9IDE0O1xuXG4gIGNvbnN0IGFuZ3VsYXJWZXJzaW9uID0gVkVSU0lPTiAmJiBWRVJTSU9OLm1ham9yID8gcGFyc2VJbnQoVkVSU0lPTi5tYWpvciwgMTApIDogdW5kZWZpbmVkO1xuXG4gIGlmIChhbmd1bGFyVmVyc2lvbikge1xuICAgIGlmIChhbmd1bGFyVmVyc2lvbiA8IEFOR1VMQVJfTUlOSU1VTV9WRVJTSU9OKSB7XG4gICAgICBJU19ERUJVR19CVUlMRCAmJlxuICAgICAgICBsb2dnZXIud2FybihcbiAgICAgICAgICBgVGhpcyBTZW50cnkgU0RLIGRvZXMgbm90IG9mZmljaWFsbHkgc3VwcG9ydCBBbmd1bGFyICR7YW5ndWxhclZlcnNpb259LmAsXG4gICAgICAgICAgYFRoaXMgU0RLIG9ubHkgc3VwcG9ydHMgQW5ndWxhciAke0FOR1VMQVJfTUlOSU1VTV9WRVJTSU9OfSBhbmQgYWJvdmUuYCxcbiAgICAgICAgICBcIklmIHlvdSdyZSB1c2luZyBsb3dlciBBbmd1bGFyIHZlcnNpb25zLCBjaGVjayB0aGUgQW5ndWxhciBWZXJzaW9uIENvbXBhdGliaWxpdHkgdGFibGUgaW4gb3VyIGRvY3M6IGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL2FuZ3VsYXIvI2FuZ3VsYXItdmVyc2lvbi1jb21wYXRpYmlsaXR5LlwiLFxuICAgICAgICAgICdPdGhlcndpc2UsIHBsZWFzZSBjb25zaWRlciB1cGdyYWRpbmcgeW91ciBBbmd1bGFyIHZlcnNpb24uJyxcbiAgICAgICAgKTtcbiAgICB9XG4gICAgc2V0Q29udGV4dCgnYW5ndWxhcicsIHsgdmVyc2lvbjogYW5ndWxhclZlcnNpb24gfSk7XG4gIH1cbn1cbiJdfQ==